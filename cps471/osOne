# Author: Ash+
# Date Created: ? Feb 11 6:00:00 PM EST 2021
# Last Date Modified: Fri Mar  5 10:27:01 PM EST 2021
# File Name: osOne
# Course: CPS 471
# Instructor: Baldwin


~~
OS security layers: 	(Bottom-up)
	* Physical Hardware
	* Bios/SMM, as the machine is booting up 
	* Operating system kernel, 
	* Applications and utilities

Strategies:
	* White-listing approved applications
	* Patching third-party applications and os vulners
	* Restrict admin privi's
	* Creating defense-in-depth system

Installation process:
	* Possible to be compromised during installation
	* Building and deploying should be planned to counter ^ above threat
	* Counters:
		- assess risk and plan deployment
		- secure underlying os and key applications
		- secure critical content
		- appropriate network protection
		- appropriate processes to maintain security

Planning:
	* First step to deplying systems is to plan
	* include a wide security assessment of org
	* know security requirements for machine, applications, data and users
	* maximize security while minimizing costs
	* identify appropriate personnel and training to deploy and install sys's


Planning process:
	* know purpose of system, known apps, services and security requirements
	* know category of users
	* user authentication
	* access to information on machine (db's etc)
	* machines access to other hosts
	* who's admin of system, and how will they manage the system (local/remote)
	* additional security (anti-virus, malware protection, firewalls)

OS hardening:
	* install and patch os
	* harden and configure the os by:
		- removing services, apps and protocols
		- configure user groups and permissions
		- configure resource controls
	* install and configure security controls (anti-virus, host firewalls, IDS)
	* testing the security of the os yourself

Initial setup and patching:
	* installation of base os
	* on protected network
	* full installation and hardening before deployed to desired system
	* initial installation should install least necessary
	* boot process must be secure
	* device drivers (for unique IO devices), and validate them
	* keep machine up to date with patches
	* stage and validate patches on test systems

Removing services, applications and protocols:
	* fewer software, fewer risks
	* system planning should identify what's required for system ONLY
	* supplied defaults should not be used when performing initial install

Configure users, groups and authentication:
	* not all users should have access to all data and resources
	* elevated privi to only some user groups
	* planning process:
		- category of users
		- privi's they have
		- types of information they can access
		- how and where they are 'defined?' and authenticated
	* defualt accounts should be removed or secured

Configure resource control:
	* user and groups defined permissions to data and resources 
	* hardening guides provide lists of recommended changes to configue

Install additional security control:
	* antivirus
	* Host firewalls
	* IDS or IPS software
	* application whitelisting

Testing system:
	* Goal: ensure your countermeasures are correctly implemented
	* checklists are included in hardening guides
	* some programs can scan vulners and basic security requirements
	* repeat to maintain security ^

Application configuration:
	* create data storage areas and applications
	* configure default settings for applications
	* some apps include:
		- default data
		- scripts
		- user accounts
	* careful of services that can be remotely accessed

Encryption technology:
	* used to secure data at rest or transit
	* must be configured via crypto key, created, signed and secured
	* use TLS or IPsec 
	* if some services use SSH, client and server must have keys
	* encrypt entire file system 

Security maintenance:
	* monitoring and analyzing logging info (record activities)
	* perform backups
	* recovering from compromises
	* regular test of system security
	* software maintenance via patching all software

* Logging:
	* informs of bad things that already happened
	* info can be created by system, network and applications
	* if breach or failure, sys admins can identify what happened
	* range of logging should be determined in planning stage
	* only log important data
	* sufficient space is needed for logs
	* saving logs is important
	* automated analysis

* Data backup and archive:
	* perform regular backups
	* backup: copies of data at regular intervals
	* archive: retain data over long period of time for legal/policy standards
	* backup and archive should be determined during planning stage
	* backups/archives can be stored offline/online and onsite/offsite

Linux/Unix security:
	* patch managment, keep security patches up to date
	* application and service configuration:
		- implemented in separate text files
		- generally in /etc directory 
		- user configs that potentially override system is in home directory and are hidden (dotfiles)
		- most important is to remove or disable services

	* User, groups and permission:
		- access is specified as read, write and execute
		- to users, groups and world (randoms)
		- guides recommend changing permission for directories
		- local exploit: software vulner exploited to gain privi while 
			machine is already compromised
		- remote exploit: software vulner in network server 

	* Remote access controls:
		- host-based firewalls 
		- admin util to select which services access the system
	
	* logging and log rotation:
		- dont assume default settings are appropriate 
		- how often do you save log offsite, etc

	* chroot jail:
		- restrict servers view to specified portion of directories
		- chroot call to map root of filesystem to another directory
		- can't .. up a directory
		- added complexity is main disadvantage

Windows Security:
	* patch managment:
		- windows update && server update
		- third party updates fall into this

	* user admin and access control:
		- system implements discretionary acccess control
		- vistas+ include integrity control
		- objects labeled as low, medium or high integrity level
		- ensuring integrity level is higher or equal to objects
		- Biba integrity model
	
Windows security users admin and access control:
	* windows define privi's and grants to user accounts
	* share and NTFS permission used to provide security on shared resource
	* User account control (UAC) only use admin when needed, otherwise normal
	* Low privi service accounts (file, print, dns etc)

Windows security:
	* config infor stored in registry (central database)
	* registry editor modifies registry keys
	* other security controls:
		- antivirus antispyware, personal firewall + other malware detection		    
		- default windows has basic firewall and some malware counters
		- make sure some applications are compatible

	* encryption:
		- encrypting files or directories using EFS
		- full-disk encryption 

	* microsoft security compliance toolkit:
		- tool that checks for compliance with security recommendations

Virtualization;
	* abstraction of resources via simulation of an environment
	* better effiency of system resources
	* can use other os's in vm
	* additional security concerns

Virtualization alternatives:
	* Application virt: allows apps written for other os's to run 
	* full virt: os's run in parallel
	* virtual machine monitor: hypervisor coordinates access to vm's

Native virtualization security layers:
	* Where the VMM runs on the operating system itself (hypervisor on os)
	* Layer between differen't vm's and physical hardware  
	* vm1 vm2 vm3... under guidance of hypervisor / vmm

Hosted virtualization security layers:
	* hypervisor / vmm layer ontop of the host os (acts as an application)
	* protection still necessary to the hypervisor application

Virtualization security issues:
	* isolating programs executing on vm, only use x amount of resources
	* hypervisor has privi access to programs and data on each os
	* attackers can modify image / snapshot of vm

Securing virtualization systems:
	* carefully plan the virt system
	* securing all elements of the vm && maintenance of security
	* ensuring hypervisor is secured 
	* restrict admin access to image/snapshot

Hypervisor security:
	* securing process similar to securing os
	* installed on isolated environment 
	* configure && update automatically
	* monitor for compromise
	* access only to auth. users
	* local + remote admin access configured correctly
	* IDS + firewall designed remote admin access
	* communication channel seperate from other channels

Virtualization infrastructure security:
	* management of access to hardware resources
	* access to only appropriate guests
	* access to image/snapshot controlled

* Cloud stuff <-- nothing here just mentioned 
