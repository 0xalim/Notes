# Author: Ash+
# Date Created: ? Feb 25 08:00:00 PM EST 2021
# Last Date Modified: Sat Mar  6 06:24:58 PM EST 2021
# File Name: userAuth
# Course: CPS 471
# Instructor: Baldwin


~~
userAuth: Verifying claimed identity by / for system

authProcess:
	* Fundamental building block
	* basis of access control + userAccountability
	* Identification step:
		- Presenting an identity to the system
	* Verification step:
		- generating authentication binding to claimed identity

authModel (NIST-800-63-2):
	* User registers (getting credentials)
		- Registration authority (RA)
	
	* Token given to user by Credential Service Prov (RA)
	* If user wants to access system, user -> verifier
	* Verifier gives token + identity claimed to Credential Service Prov
	* If it comes by correct, auth. session is given.

authMethods:
	* User knows something:
		- Password
		- Pin
	* Token:
		- Smart card
		- Physical key
	* Biometric:
		- Fingerprint
		- Retina
	* User does something:
		- Typing
		- voice

riskAsses:
	* Assurance level:
		- Degree of certainty org. has to user

	* Potential impact:
		- Impact if org. is wrong
		- What org. looks at 
	
	* Areas of risk
		- wide spectrum of concern to org.

assuranceLevel:
	* Degree of certainty (confidence).
		-  Who verifies the user inputs (verifiers)
		-  Degree of confidence that the user is who they claim they are
	
	* Assurance Level:
		- 1: No confidence
		- 2: Little confidence
		- 3: High confidence
		- 4: Very high confidence

potentImpact:
	* FIPS 199 three levels of potentImpact:
		- Low: Limited adverse to operations, asset, individuals
		- Moderate: Serious adverse effect to ^
		- High: Catastrophic adverse effect to ^

passAuth:
	* user gives user/pass
	* System compares pass with stored one for that user
	* UserID:
		- determines user authorization
		- user privi
		- discretionary access control (who u are = type of access u have)

passVulners:
	* offline dictionary attack:
		- attacker grabs password file (encrypted/hashed)

	* specific account attack
		- self-explanatory
	
	* popular password attack
		- self-explanatory
	
	* password-guessing
		- can be manual / brute force automation
	
	* workstation hijacking
		- guy is afk, look if he wrote down his pass

	* exploiting user mistakes
		- phishing
	
	* multiple password use
		- like me :D oops

	* electronic monitoring
		- keylog / MITM attack

unixPassScheme:
	* system hash's user's pass in registration and saves in database
	* user provides userID, when logging + password
	* system 'slow hashes' input password and compares to database stored hash
	* Salt:
		- users have different salts
		- salt is stored in plaintext in sys's database
		- 2^(n number of chars in salt)
		- prevents exact same hash codes if different users use same pass

	* why slow hash users input?
		- wastes attackers time when brute forcing, i gwuess

hashFunc:
	* easy to -> ; impossible to <-
	* input is ascii, output is hash (fixed length hexa)
	
uniximplem:
	* original scheme:
		- 8char max length
		- 12 bit salt (modified des encrypt)
		- output is 11 char sequence 

	* inadequate nowadays

improvedImplem:
	* much stronger hash/salt schemes for unix
	* md5 recommended hash:
		- salt up to 48 bits
		- unlimited password length
		- 128 bit hash
		- innerloop with 1000 iterations for slowdown
	
	* openBSD uses blowfish encryption

passCracking:
	* dictionary attacks:
		- dictionary of passwords to compare 
		- password must be hashed with all salt values

	* rainbow table attacks:
		- already hashed values for all salts
		- really large table of hashed values used to compare input
		- countered by using more salt + larger hash length

	* password cracker:
		- exploits people's tendency to use short passwords 

	* john the ripper:
		- password cracker
		- brute force tool

modernApproaches:
	* complex pass policy
	* password-cracking techniques have improved:
		- processing capability upped++
		- better algorithms
		- studying more examples and structures

passFileAccessControl:
	* password file only available to authorized users
	* shadow password file 
	* vulners:
		- os vulners allowing access to file
		- wrong permissions set 
		- same password on other sys's
		- access from backup 
		- sniff password (mitm)

passSelection:
	* user education:
		- use harder to guess pass
		- more policy
	
	* computer gen. passwords
		- users have trouble remembering them

	* reactive password checking
		- sys runs password cracker to find guessable passwords

	* complex policy:
		- sys rejects users password if too easy
		- eliminating guessable passwords

proactivePasswordChecking:
	* large database of passwords to 'not use' run by cracker from org.
	* rule enforcement:
		- policies basically, uppercase, special character, number
	
	* bloom filter:
		- used to check user passInput against 'not to use' database 

memCards:
	* only store, not process data
	* magnetic stripe card
	* hotel / atm
	* better with pass/pin
	* drawbacks:
		- needs special reader
		- can lose it
		- user dissatisfaction

smartTokens:
	* bank card
	* can have small interfaces
	* interface communicates with reader/writer
	* authProtocol:
		- static
		- dynamic gen.
		- challenge-response

smartCards:
	* credit card
	* has elec. interface
	* can use smart token protocols
	* contains:
		- mciroproc.
		- memory
		- I/O ports
	
	* types of memory:
		- ROM (read only): stores data, never meant to change
		- EEPROM (elec. erasable prog. ROM): can reprogram
		- RAM: can hold temporary data

electronicIdentityCards:
	* smart cards as national identity card
	* all in one card
	* ethical / w/e the fuck issues
	* high level of assurance
	* german card: 
		- personal data
		- document number
		- card access number
		- machine readable zone

bioAuth:
	* auth based on physical characteristics
	* pattern recognition
	* complex and expensive
	* includes:
		- face
		- fingerprints
		- hand
		- retinal
		- iris
		- voice

genericBioSys:
	* enrollment:
		- scan via interface
		- feature extractor (unique identity)

	* verification
		- scan
		- feature extractor 
		- compare with database supplied

	* identification
		- scan
		- feature extractor
		- compare via database

remoteUserAuth:
	* auth over network
	* security threat:
		- eavsdropping
		- capture pass
		- replay auth. sequence

	* relies on challenge-response to counter threats

potentAttacks:
	* table in book
