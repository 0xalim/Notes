# Author: Ash+
# Date created: Tue Mar 16 12:50:09 AM EDT 2021
# Last Date Modified: Wed Mar 24 11:01:36 AM EDT 2021
# File Name: intDetect
# Course: CPS 471
# Instructor: Baldwin


# This is chapter 8 of CompSec Principles && Practice (William Stallings)
# Intrusion Detection, prior to learning about IPS's; funneled.


learningObjectives:
	* Classes of intruders + common steps when attacking a system
	* Logical components of an IDS + host/network based IDS
	* Anomaly detection, signature, and heuristic intrusion detection
	* Categories + machine-learning of anomalyIDS
	* Signature vs heuristic IDS + data sources for HIDS + Distributed HIDS
	* Detection technique for NIDS + its sensors
	* Distributed/hybrid IDS
	* Honeypots + multiple types of honeypots
	-> snort as an example of IDS
	
hackers: (/cracker)
	* System intruder (90% outside)
	* need to use defense-in-depth strats to counteract
	* able to develop attacks that can thwart firewalls + network IDS's

typesof/h/c:
	* cyberCrim:
		- organized crime members
		- LF financial reward through:
			- identity theft / data theft/ransoming
			- financial creds
			- corporate espionage

		- some bullshit about eastern euro's, russians, asians 
		- use 'underground' forums :D
	
	* Activists:
		- can be insiders, members of larger group of outside attackers
		- social/political motivated -> hacktivists
		- goal: promote their cause, web defacement, dos attacks
		- anony/lulzsec
		- apparently snowden is here :DDD

	* state-sponsored orgs:
		- apt's here
		- covert and persistent threats

	* others:
		- classic h/c motivated by technical challenge/reputation
		- buffer overflow attacks revealed by people here
		- hobby hackers, exploration of system + network system
		- come become recruits for above class

skillLevel:
	* apprentice:
		- minimal technical skill
		- script kiddies
		- dogTrash :D

	* journeyMan:
		- sufficient technical skill (can modify/extend toolkits)
		- can locate new vulners to exploit
		- defending against these dogs a bit hard due to modification
		  of tools + good knowledge
		
	* master:
		- high-level tech skills
		- can discover brand new vulner(+categories)
		- can write powerful toolkits
		- prob. hired state-sponsored orgs/APTs

intrusionExamples:
	* remote root compromise of email server
	* webDefacement
	* guessing/cracking pass's
	* cp database of credit cards
	* medical info/payroll records - sensitive data here
	* packet sniffer to capture user/pass
	* gain internet network access
	* social engineering attacks
	* hijacking workstation

intruderBehaviour:
	* target acquisition + info gathering:
		- recon public info (technical/non-technical)
		- usage of network exploration tools
		- mapping 

	* initial access:
		- exploiting remote network vulner
		- guessing weak credentials
		- installation of malware
		- social engineering/drive-by-downloads

	* privi escalation:
		- increase privi 

	* info gathering / sys exploit:
		- access or modify information or resources
		- navigate to another system on network

	* maintain access:
		- install backdoors:
		- covert auth. credentials
		- configure changes to system to enable access

	* covering tracks:
		- modification/deletion of logs
		- remote evidence of attack
		- use rootkits
		- hide installed files/code

secIntrusion:
	* event(s) where intruder gains (or attempt) access to system 
	
intDetection:
	* service that monitors + analyzes events (real-time) to find
	  attempts to access system/resources in unauthorized manner

logicalComponents:
	* sensors:
		- responsible for collection of data
		- sensors can be other programs that gather data
		- network packets, log files, system call traces
		- forward this data to analyzer

	* analyzer:
		- receives input from sensors/other analyzers
		- determine if intrusion has occured + provides evidence
		- guide users what to do in intrusion
		- storage for future analysis + review 

	* user interface:
		- can view output from system
		- control/configure behaviour of system

IDS/h/n/d:
	* host-based:
		- monitor of single host + event for suspicious activity

	* network-based:
		- monitors network traffic for segments/devices
		- analyzes network, transport and application protocols

	* distributed/hybrid:
		- combination of sensors (host+network)

basicPrincipleOfIDS:
	* if intruder has been detected, can eject from system before any damage
	  has been done

	* idea of, quicker we figure out, less damage we take
	* good IDS can prevent intrusions
	* IDS can collect information, to strengthen intrusion 

userProfiles
	* minimize the chance of false positives/false negatives
	* too loose system, too many intruders
	* too tight, too many false positives
	* insider attackers are harder to detect

baseRateFallacy: (??)
	* too little alarms -> false sense of security
	* too many alarms -> wasted time analyzing non-intrusions/not caring
	
IDSRequirements:
	* conitnually run with minimal supervision
	* can self-recover crashes + reinit
	* needs to monitor itself + modifications to configurations, etc
	* minimal overhead
	* configured according to policies
	* adapt to changes in sys + user behaviour in time
	* scale to monitor large number of hosts
	* if some components stop working, rest should be affected minimally
	* dynamic reconfigure, configure without having to restart

analysisApproach:
	* anomaly detection:
		- collecting data of user behaviour (legitamete)
		- current behaviour compared real-time
		- determine whether its intruder or not 
		- can detect zero-days / unknown attacks
		- difficult in collecting/analyzing data required
		- high false alarm 

	* signature / heuristic detection:
		- use set of malicious data patterns (signatures)
		- or attack rules (heuristic)
		- compare rules with current behaviour (real-time)
		- can only identify known attacks, which is set in rules

anomalyDetection;
	* develop model of proper user behaviour by:
		- collecting + processing sensor data from normal user
		- requries training phase
		- can be continuous process of monitoring + evolving model
		- compare model with real-time user, determine if intruder

	* classification approaches:
		- statistical: analysis of behaviour using univariate, multivariate,
				or time series model of observed metric (??)

		- knowledge based: expert system classifies behaviour according
				to set of rules (from legit user)

		- machine-learning: determines classification model from training
				data using data mining techniques

machineLearning:
	* bayesian network: probabilistic relationship among metrics
	* markov model: developed model with states + hidden states interconnected
			by transition probabilities

	* neural networks: simulate human brain operations with neurons and 
			synapse between them

	* fuzzy logic: fuzzy set theory 
	* genetic algorithms: evolutionary biology, inheritance, mutation, selection
			and recombination to develop rules

	* clustering + outlier detection: grouping of data into clusters based
			on similarity, then identify data as a cluster/outlier

detection/s/h:
	* signature:
		- match collection of pattern (malicious) against stored data
		- signature large enough to min/max false alarm rate
		- used in anti-virus products, network proxies + NIDS
		- low cost in time + resources used
		- need to maintain, keep up to date vs new vulners
		- cannot detect zero-day attacks

	* rule-based heuristic:
		- use of rules to identify penetration
		- rules are OS+machine specific
		- analyze attack tools+scripts and develop rules against them
		- ^ interview sysAdmins to gain info of penetration + key events
		- Snort system: rule-based NIDS

hostBasedIDS:
	* layer of security to systems like: databases/admin systems
	* IDS can thwart attack before damage is done
	* main purpose: 
		- detect intrusion
		- log suspicious events
		- send alerts

	* main advantage: detect internal+external intrusions (!/NIDS/firewalls)
	* can use anomaly or sig/heu approach

dataSources+Sensors:
	* system call trace:
		- record of system calls on a system
		- good for unix systems, bad for windows (due to DLLS obscurity)

	* audit:
		- collection of audit logs from system
		- no additional software (already installed on OS)
		- excess information or bad format
		- can be manipulated by attackers

	* file integrity checksums:
		- scan critical files and compare to baseline for changes
		- comparison of cryptographic checksum of files
		- need to generate + maintain these checksums 
	
	* registry access: (windows)
		- looks for modifications to registry

anomalyBasedHIDS:
	* good for unix/linux due to system calls being logged easily
	* bad for windows due to DLL obscuring collection of system calls
	* approach for windows is to monitor specific DLL's (pg. 200)
	* Checksums:
		- compare checksums for important config files/directories
		- determine critical files to monitor + maintain baseline versions

HIDS/s/h:
	* used in anti-virus / anti-malware software
	* used by windows systems, mail + web app proxies (firewall + NIDS)
	* database:
		- database of signatures (known malicious software)
		- database of rules (categories malicious behaviour)

	* cannot detect zero-days until signature+rules are in database

distributedHIDS:
	* multiple hosts in LAN
	* cooperation + coordination of IDS acress the network
	* issues:
		- different sensor data formats
		- transmittion of data requires integrity+confidentiality
		  for data over a network at certain analysis points in network

		- centralized architecture: single point of collection and 
			analysis of all sensor data. potential bottleneck + 
			single point of failure
	
		- decentralized architechture: more than one analysis centre but 
			they are required to coordinate + exchange information

	* components:
		- host agent module: audit collection module collecting data
			on security-related events.

		- LAN monitor agent module: analyzes LAN traffic + reports events
		- central manager module: receives reports, correlates data to 
			detect intrusion
	
	* steps:
		- agent captures data, filters + reformats into host audit record
		- logic module analyzes activity:
			- accessing files / changing access control
			- attack patterns (signatures)
			- anomalous behaviour based on historical data

		- malicious activity detected, alerts central manager
		- central manager inferences for copies of HAR's
		- LAN monitor supplies audits, conncetions, services, etc
		
NIDS:
	* network-based IDS; monitors traffic at points(s)
	* can examine traffic packet by packet in real time (or close to)
	* can examine network, transport + application-level protocol activity
	* commonly associated with the firewall
	* monitoring for external intrusions
	* drawback: due to encryption its become harder for NIDS to be useful
	* analysis can be done at: 
		- the sensor
		- management server
		- combination of two

typesOfNetworkSensors:
	* inline sensor:
		- incoming traffic has to pass through inline sensor
		- combination of NIDS sensor + firewall/LAN switch
		- advantage: no hardware is needed
		- in case of stand-alone inline sensor: it's being used as a 
			intrusion detector + intrusion prevention functions

	* passive sensor:
		- monitors copy of network traffic (not actual  traffic)
		- advantage: no packet delay
		- connected to network via physical cable
		- network interface card (1): has no ipadd
		- network interface card (2): communicates with management server


sensorPlacement: (scenario is large org with multiple servers)
	* just behind external firewall:
		- sees attack coming from outside world
		- highlights policy issues with firewall
		- monitor attacks to web/ftp server
		- IDS can monitor outgoing traffic from compromised server

	* between internet & external firewall:
		- see all attacks coming from outside
		- drawback: higher processing burden

	* just outside of internel servers:
		- can monitor large amount of network traffic
		- detect unauthorized attacks inside of org
		- can be tuned for specific ports + attack techniques

	* just outside workstations:
		- detect acttacks targeting critical systems
		- can focus limited resource to network assets (financial networks)
		- can be tuned for specific ports + attack techniques

intrusionDetectionTechniques:
	* NIDS uses signature + anomaly detection too (SPADE is snort plugin)
	* Signature techniques:
		- application layer recon+attacks: list of common ports pg. 287
		- transport layer recon+attacks: tcp+udp traffic, unusual packet
			fragmentation, scan for vulnerable ports, syn-flooding

		- network layer recon+attacks: ipv4/6, icmp, igmp analysis. examples
			are spoofed ipadd, illegal ip header values

		- unexpected application services: NIDS detecting apps running that
			shouldn't, and open ports that should not be

		- policy violations: inappropriate websites + forbidden app protocol

	* anomaly techniques:
		- dos attacks: NIDS can detect significant packet traffic or 
			connections attemps

		- scanning: detects attacker probing network, atypical flow pattern
			at the application layer such as: banner grabbing, scanning
			tcp/udp ports, scanning icmp 

		- worms: catching hosts communicate that normally should not be, 
			and the use of ports that normally would not be.

statefulProtocolAnalysis: (SPA)
	* looking at connection at a higher level (entire convo) instead of a 
	packet by packet convo

	* comparison of real time network traffic with universal vendor profiles
	* used for benign protocol traffic
	* drawback: high resource cost
	* tracks network + transport + application protocol states

loggingOfAlerts:
	* timestamp (date+time)
	* unique session id
	* event or alert type
	* rating (severity level)
	* network + transport + application protocols
	* source + destination ipadd + tcp/udp ports, icmp types and codes
	* number of bytes transmitted
	* decoded payload data
	* state information (auth. username)

intrusionDetection/dist/hyb:
	* loose firewall policy by organisations + employee laptops connecting 
	  via network protocols, threat is still there
	
	* attack approach (1): use of worms that propogate fast af + ddos attacks
	  so that the attack is done before defense is mounted
	
	* attack approach (2): slow spread of attack so it's difficult to detect

	* countermeasure: development of cooperated systems that react to miniscule
	  change to the machine, using anomaly detection. but false positive/negative
	  issue comes from this scenario. so we use a 'gossip' protocol

	* p2p gossip protocol informs other machines of it's suspicion, saying that
	  it could be under attack. If message threshold is exceeded, it locally 
	  tries to defend itself + send alert to central system.

autonomicEnterpriseSecuritySystem:
	* every end-host + network device (router) has sensor module installed. 
	  and they all communicate toe state of the network (under attack??)

	* intels answer:
		- multiple IDS provide greater coverage + rapid response
		- analysis of host-level network traffic
		- host-based detector uses application data as input to local
			classifier (??)

	* advantage of lots of sensors accross org: imagine single-host system, it 
	  detects something is off, but needs more evidence to prevent a false
	  positive so it has to wait (can be long) until it is sure an attack is 
	  under way. now imagine muli-sensor'd org, if they all pickup on something
	  suspicious, they each share their state and information, false positive
	  rate is much lower thus alerts much faster + prevents attack. 

intrusionDetectionWorkingGroup:
	* defines data formats + exchange procedures for sharing info to,
	  IDS + response system + management systems
	
	* RFCs:
		- 4766: defines requirements for IDMEF + communication protocol
		- 4765: data model for exported info by IDS (in XML)
		- 4767: defines IDXP, app-level protocol for exchanging data 
			between different IDS's
		
intrusionDetectionMessageExchange:
	* functional components of model:
		- data source: raw data (network, os logs, app audits, etc)
		- sensor: collects data from data source + forwards to analyzer
		- analyzer: analyzes for unauthorized access or unwanted activity
		- admin: human responsible for setting up security policy for org
		- manager: where operator manages components of ID system, 
			things like config for sensor, analyzer, event management

		- operator: human, primary user of IDS manager, takes action, etc

honeypots:
	* decoy systems, lure attacks from critical systems
	* designed to:
		- divert attacker from critical sys
		- collect info about attackers activity
		- encourage persistance so admins can respond

	* filled with fabricated information
	* any access to honeypot = probable attack (outbound = 100% attack)
	* in an attack, admins can monitor + log without exposing systems
	* no production value = no reason for anyone to interact
	* any communication = probe, scan or attack
	* low interaction honeypots:
		- kitted out with software and stuff to make it real, but does
		  not execute full version of services/systems

	* high interaction:
		- real system, full os + services + applications
		- more realistic = more persistance on attackers end
		- drawback: uses more resources + can initiate an attack

locationForHoneypots:
	* outside external firewall:
		- no internal network risk
		- attracts lots of potential attacks
		- reduces alerts from IDS + firewall
		- drawback: no way to trap attackers

	* network of external availabele services:
		- things like web + mail + file transfer, dns, etc
		- called demilitarised zone
		- other systems must be 100% secure against honeypot in this network
		- disadvantage: DMZ is not fully accessible
		- firewall limits traffic (via detecting unneeded services), so 
		  usefulness of honeypot is less

	* fully internal:
		- can catch internal attacks
		- can detect misconfigured firewall
		- disadvantages: can launch attacks from honeypot
		- firewall needs to be configured very well, or internal compromise 
		  is a possibility

snort:	
	* open source, configurable, postable HIDS+/NIDS
	* easily deployable 
	* small memory/processor use
	* easily configurable by sysadmin
	* real time packet capture, protocol analysis (TCP/UDP/ICMP)
	* snort installation:
		- packet decoder: processes every packet, main goal is to set 
			poimnters so multiple protocol headers can be extracted

		- detection engine: intrusion detection; analysis of packets here.
			depending on rule, and actions of those rules set by sysadmin
			otherwise it discards packet

		- logger: each packet that matches a rule, rule specifies logging 
			and alerting options. if logger is set by rules, the 
			logger stores packet in readable format for later

		- alerter: for each detected packet, an alert can be set. info in
			event notification can be configured + also stored to file
			unix socket or database.

	* configuration:
		- sniffer: monitors traffic, but not an inline sensor
		- packet logger
		- intrusion detection / prevention

snortRules:
	* each rule configured has (1) fixed header (2) 0 or more options
	* header:
		- action: wat to do if match is found. alert, log, pass, drop, etc
		- protocol: analysis if packet protocol is a match (tcp,udcp,icmp,ip)
		- source ipadd: source of packet
		- source port: specific port number, ranges, etc
		- direction: unidirection or bidirectional
		- destination ipadd: destination of packet
		- destination port: destination port
	
	* options:
		- metadata: info about rule (no affect during detection)
		- payload: look for data inside packet payload
		- non-payload: look for non-payload data
		- post-detection: triggers after a rule has matched a packet

	* example snort rule:
		Alert tcp $EXTERNAL_NET any -> $HOME_NET any\
		 (msg: "SCAN SYN FIN" flags: SF, 12;\
		reference: arachnids, 198; classtype: attempted-recon) 
