# Author: Ash+
# Date created: Thu Mar 11 12:18:19 AM EST 2021
# Last Date Modified: Wed Mar 17 10:58:45 AM EDT 2021
# # File Name: securityAud
# Course: CPS 471
# Instructor: Baldwin


# This is chapter 18 of CompSec Principles && Practice (William Stallings)
# This chapter is 'planned to be' one of many chapters studied
# Using funneling

Objectives:
   * What is a 'security audit' and what are its elements
   * What is the alarm model and how does it differ from ^
   * What is the principal security auditing functions
   * What audit data should be collected/not
   * What are the main elements of a UNIX syslog
   * Application-level auditing
   * Difference of audit review and analysis
   * What is an SIEM system

Security Auditing: (RFC 4949)
	* Review and examination of a system's "records" and activities to:
		- determine adequacy of system control
		- ensure compliance with policy
		- detect breaches in security controls
		- recommend and needed changes

Audit logs:
	* Chronological records of sys activities concerning:
		- operation, procedure or event in security transaction
		- from start to finish

SecAudit + alarm Model:
	* Event discriminator: logic in software to monitor and detect activities
		that it has been configured to do so

	* Audit recorder: eventDisc sends info in form of message to audit recorder
		guessing logs here?

	* Alarm Processor: some msgs seen by eventDisc are critical and sent here,
		depending on severity consequences are different. Also an auditable
		event, sent to auditRecorder

	* Security audit trail: auditRecorder sends info here, to be formatted 
		and saved.

	* Audit anlyzer: all information from secAuditTrail is available the the
		analyzer, detects pattern and sends to auditRecorder if important.
		if needed sent to alarmProcessor as well.
		
	* Archiver: software module, after 'x' time it savess data stored in 
		secAuditTrail - perma data
		
	* Provider: application/user interface to audit trail

	* Trail examiner: application/person examines data in archives for trends
		and forensics

	* Security reports: examiner creates human-readable report

model+IDS:
	* Can feed this information (pref. critical information) into IDS.
	* Centralized repository created for distributed systems <--- ???
	* Distributed auditing service:
		- Trail collecter: collects all audit trails from all systems
		  and creates a combined audit trail
		
		- Dispatcher: sends records from local -> centralized collector

secAudit functions: Another security auditing function breakdown
	* Data gen: Enumerates types of auditable events. Takes into consideration
		user privacy, so it may/may not record user depending on severity.

	* Event selection: configuration of system to include/exclude audits, 
		providing granularity.

	* event storage: creation + maintenance of secAuditTrail. prevents loss of 
		availability + loss of data
	
	* autoResponse: defined reactions following detection of events that are
		potential security threats.

	* Analysis: uses anomaly detection + attack heuristic to determine whether
		recorded audits are security threats 

	* Review: authUsers are able to review if possible via interface, allowing
		filtering(multiple) of criteria

secAudit requirements:
	* event definition: define the set of events that are to be audited
		-> list is in pp/book if needed

	* event detection: monitoring software at appropriate places that 
		captures the defined events

	* event recording: secure storage + resistant to tampering and deletion

	* event analysis: set of tools to analyze the collected data to 
		investigate patterns

	* security of the audit function itself
	
	* minimal effect on functionality

infoCollection: Keeping in mind 1) amount of info 2) granularity
	* when is audit software used
	* security mechanism events
	* firewall / IDS detections
	* sys management + operation
	* os access
	* remote access

	* disadvantages:
		- performance hit 
		- burden to algorithms analyzing audits
		- excessive security reports

patternDetection:
	* keep in mind that we should not only collect security irregularities
	* but also normal behaviour and pattern
	* to be served as input, when determining anomalies or irregular patterns
	* + in an attack, analysis of ALL activity is necessary!

auditableItems (X.816):
	* related to specific connection:
		- connection request + confirmation
		- disconnection request + confirmation

	* related to using security apps:
		- security service request + usage
		- security alarms

	* related to management:
		- management operations + notifications
	
	* minimum auditable events:
		- denying access / authentication
		- changing attributes
		- creation / deletion / modification of objects
		- use of privi

auditableItems (ISO 27002):
	* authorized access:
		- user ID
		- date+time+ key events
		- types of events?
		- files accessed
		- programs/utilities used

	* privi operations:
		- use of privi accounts
		- startup/stop system
		- i/o devices

	* unauthorized access:
		- failed user actions
		- faield accessing data/resources
		- policy violation for network gateways+firewalls
		- proprietary ids's alerts

systemLevelAudit:
	* access to system (users / start/stop system)
	* login attemps
	* devices connected to mahine
	* os functions
	* misc items: 
		- system operation??
		- network performance indicators

applicationLevelAudit:
	* depends on priority of application
	* on email apps: 
		- record sender/receiver
		- message size
		- type of attachments

	* sql query:
		- user
		- type of transaction
		- tables, row, columns / data items accessed

userLevelAudit:
	* records user interactions with system:
		- using terminal commands
		- authentication attemps
		- files / resources accessed

physicalLevelAudit:
	* generated by physial equipemnt:
		- card readers
		- cameras
		- sensors, shit liek this
	
	* then sent to centralized area for storage + analysis
	* info:
		- date+time
		- which door+keycard used
		- invalid attemps
		- granting employee access / deletion of old access
		- do not desensitize observer! (only show invalid access)

protectingAuditTrail:
	* storing records:
		- read/write file on a host
		- writeonce/read-many (CDROM)
		- write only 

	* printing logs in system crash
	* symmetric encryption (AES/tripleDES)
	* protection of auditTrail in central repo

windowsEventLog:
	* captures 'interesting' occurence in compSys; events contain:
		- id code
		- attributes (task, opcode, version, etc)
		- user supplied data (optional)
	
	* sys eventLog:
		- runs under service accs/devices/drivers/components
		  that capture events relating to health of compSys

	* app eventLog:
		- log is usually not secure
		- runs under any user-level application
		- (??) extensive log should define application-specific log

	* sec eventLog:
		- 'windows audit log'
		- exclusive use for 'windows local security authority' (??)

	* window event schema elements tb18.4 in book

windowsUserAllowedAuditOptions:
	* these are options windows lets users enable
	* account logon events:
		- user auth. activity
		- authentication granted/failed/failed mapping for logon
		- large failure in attemps -> brute force attack/scanning/propogation

	* account management:
		- admin related activity
		- create/manage/delete of users + usergroups
		- domain policy change

	* directory service access:
		- user level trying to gain access to 'active directory'
		- AD that has, SACL:
			- system access control list
			- list of users/usergroups for granular auditing

	* logon events:
		- user auth service
		- from local or over a network
		- 'from the system that originated the activity' (??)

	* object access:
		- user level accessing file system / registry objects that
		  have SACL lists defined (??)

		- tracks read access, changes to sensitive files (deletion too)

	* policy changes:
		- admin related activity
		- changing policies, audit configurations and system-level settings
	
	* privi use:
		- windows have user right / granular permission to perform tasks
		- meaning you're never always using a admin privi,
		- usually user level and only when needed go admin privi.
		- when using admin privi it records everything including:
			- creating objects
			- debugging executable code
			- backing up the system
	
	* process tracking:
		- audit information when process starts / finishes
		- audit info when process is started indirectly
		- new child process created, etc

	* system events:
		- relating to events affecting availability
		- system is shutting down, boot msgs
		- resource exhaustion
		- audit log cleared/lost
 
 syslog:
	* syslog(): API referenced by system utility + apps
	* logger: command to add 1-liner logs
	* /etc/syslog.conf: used to control logging+routing of log events
	* syslogd: sys daemon receives+routes log events from logger+syslog() comman

centralizedSyslogs:
	* features of a centralized unix syslog system
	* robust filtering:
		- provides granularity
		- handles msgs diff based-on host, program, etc
		- some can use multiple filters on a single msg

	* log analysis:
		- originally no log analysis
		- only through add-on programs (third party potent)
		- some implementations are limited now; multiple log entries
	
	* event response: 
		- can initiate a response if a certain event was caught
		- e.g a SNMP trap was found through pages or emails

	* alternative msg format:
		- capability to accept data in a non-recognized format
		- allows machines that do not support syslog, to do so

	* log file encryption:
		- through OS or third party apps, can encrypt rotated log files

	* rate limiting:
		- limits the amount of syslog msgs / tcp connections from 1 source
		- useful for preventing DDOS attack
		- but, if it's true data with unusual high rate then its loss of data

BSD-SyslogFormat:
	* PRI: code that represents serverity + facility (location)
	* header: timestamp + hostname/ipaddress
	* msg: 
		- TAG field: name of program/process that made the msg
		- CONTENT field: details of the msg

applicationLevelLogs:
	* types of vulnerabilities:
		- unchecked user input data: buffer overflow
		- privi app reading and printing a different file
		
	* granularity:
		- system level does not provide application level errors
		- IDS's look for attack signatures / anomalous behaviour
		- so we need granularity in appLevelLogging:
			- interposable libraries
;			- dynamic binary rewriting

interposableLibraries:
	* intercepting calls to library functions
	* dynamic + static shared lib's should be read-only, copies can be made
	* generating audit data without changing systems shared libraries (??)
		- or needing access to source code for executable

	* shared libraries: (~)
		- utilize a library {.so; .dll} file in operating system
		  that is a collection of lots of functions {print()}...
		- references library at runtime	

	* statically linked lib:
		- if function ! inside program code look for list of lib;
		  and link desired object into executable (??)
		- copy of library is made for every process using it

	* statically linked shared lib: (??)
		- each object assigned fixed virtual address 
		- link loader connects external referenced objects to library
		  by assigning virtual address when executable is created 
	
		- functions can be modified and remain in fixed virt add
		- however changed need to be minor so addresses of vars, constants
		  and more are not changed.

	*  dynamically linked shared libs:
		- linked to shared library is deferred unti load time (??)
		- lib contents mapped into process virt add space
		- so changes to lib prior to load time does not affect programs


usingInterposableLibs:
	* at load time: reference to routine function 'foo' is resolved to virt
	  memory address of the start of 'foo' (~)

	* with lib interpolation: special library constructed at load time that
	  contains the functions needed from shared lib.
		
	* if function is NOT in constructed lib, loader searches for it in shared
	  lib and links directly with target function

	* this is to allow auditing, recording calls, parameters passed and returned
	  the return adress in calling program and more

	* interposed module will call the actual shared function, not alteration

	* LOOKS TO ME, LIKE MITM FOR FUNCTION CALLING TO MAKE SURE ALL DATA IS 
	  NOT ALTERED ! :D

dynamicBinaryRewriting:
	* works with dynamic + static linked programs
	* 'postcompilation' technique; changes binary code of executables:
		- change is made during load time
		- modifies only memory image of program
		- does not require recompilation of app binary
	
	* implemented on linux using 2 modules:
		- loadable kernel module: 
		- monitoring daemon
	
	* loadable modules: can be linked/unlinked from kernel at run time	

linuxModules:
	* implements specific function: file system, device driver, etc;
	  kernel upper layer stuff here

	* modules do not execute (as proc or thread), but it can create kernel
	  threads for various purposes

	* modules are executed in kernel mode (behalf of current process)

runTimeEnvironmentForApplicationAuditing:
	* monitored app is invoked by execve() syscall
	* kernel module intercepts, stops app, sets process parent to monitoring
	  daemon. next, kernel module notifies user-space daemon that a monitored
	  app has started

	* monitoring daemon locates patch + audit repo functions appropriate.
	  daemon loads audit lib functions into apps address space + 
	  inserts audit function calls at certain points in app's code

	* once app has been instrumented, daemon enables app to execute 

auditTrailAnalysis:
	* secAdmin needs understanding of context around log entries:
		- info can be in other entries in same log, and other places
		- understand potential security package generates false positives

	* audit file formats are mix of plaintxt + cryptic msgs/codes:
		- some applications do this auto

	* regular review and analysis of portions of logs to keep understanding
	  eventually understanding baseline of typical log entries

understandingContext:
	* secAdmins should have solid understanding of:
		- org's policy
		- security software used by host, and consistent issues
		- operating system + major apps
		- common attack techniques
		- software to perform analysis, log reduction, query tools, etc

timing:
	* types of analysis depends on when the analysis is done
	* audit trail after an event:
		- triggered event; sys/app problem, policy violation, etc
		- focuses on audit trail entries

	* periodic review of audit trail:
		- looking at large amounts of audit
		- looks for patterns/anomalies suggesting secProblems
		- developes profiles by individual user && maintain record 

	* real-time audit analysis;
		- part of intrusion detection function

auditReview:
	* allows admins to select review following:
		- actions of 1 or more users
		- actions performed on specific object/resource
		- audited exceptions
		- actions to specific system/security attribute

	* filtered to match attributes: user, group, timewindow, etc
	* automated tool filters based on superuser input
	* record filtering options:
		- entry type (?)
		- 'newness' of entry (has it shown up before)
		- log source
		- source/destination ip add
		- time of day/week
		- frequency of entry

approachToDataAnalysis:
	* basic alerting:
		- indicates interesting event
		- can be used in IDS

	* baselining:
		- defining normal/non-normal behaviour + patterns
		- compare baseline to new data
		- example baseline values:
			- amount of network traffic
			- login/outs
			- access to admin acc's
			- dns requests
			- amount of log data per hour/day

		- thresholding id'ing data that exceedes baseline value

	* windowing:
		- detection of events in given parameters
		- given time period

	* correlation:
		- if it detects a weird event, predict countermeasure
		- buffer overflow attempt -> grab remote users ip

integratedApproach:
	* baselining impossible in some org's due to amount of audit produced
	* security information event management (SIEM) system

SIEMSystems:
	* centralized logging software + audit storage + analysis programs
	* general configuration approaches:
		- agentless: logs pulled/pushed from host through authenticating 
		 	     then SIEM performs filtering, analysis and more

		- agent-based: agent program installed does the filtering, and 
			       log normalization, etc and pushes it to SIEM server.

	* can recognize variety of formats (OS specific, software, IDS, etc) and 
	  normalizes them all to look the same

	* SIEM can analyze combined data, correlate events, identify and prioritize
	  events, and initiate response to the event if desired

SIEM+Features:
	* some other features of SIEM servers to help secAdmins:
		- GUI
		- security knowledge base (vulnerability database, and more)
		- incident tracking + reporting
		- asset information storage and correlation

example: (CISCO MARS)
	* monitoring, analysis and response system
	* supports multiple os
	* agentless + dedicated server
	* analysis packages
	* GUI
	* collects, normalizes, analyzes, the whole fucking thing mate the entire
	  fucking ordeal; jesus christ
